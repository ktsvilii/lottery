/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface SubscriptionAPIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LINK"
      | "LINK_NATIVE_FEED"
      | "MAX_CONSUMERS"
      | "acceptOwnership"
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "fundSubscriptionWithNative"
      | "getActiveSubscriptionIds"
      | "getSubscription"
      | "onTokenTransfer"
      | "owner"
      | "ownerCancelSubscription"
      | "pendingRequestExists"
      | "recoverFunds"
      | "recoverNativeFunds"
      | "removeConsumer"
      | "requestSubscriptionOwnerTransfer"
      | "s_config"
      | "s_currentSubNonce"
      | "s_totalBalance"
      | "s_totalNativeBalance"
      | "setLINKAndLINKNativeFeed"
      | "transferOwnership"
      | "withdraw"
      | "withdrawNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsRecovered"
      | "NativeFundsRecovered"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "SubscriptionCanceled"
      | "SubscriptionConsumerAdded"
      | "SubscriptionConsumerRemoved"
      | "SubscriptionCreated"
      | "SubscriptionFunded"
      | "SubscriptionFundedWithNative"
      | "SubscriptionOwnerTransferRequested"
      | "SubscriptionOwnerTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_NATIVE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubscriptionWithNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptionIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNativeFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "s_config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_currentSubNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalNativeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLINKAndLINKNativeFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_NATIVE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSubscriptionWithNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNativeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_currentSubNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalNativeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLINKAndLINKNativeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
}

export namespace FundsRecoveredEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeFundsRecoveredEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCanceledEvent {
  export type InputTuple = [
    subId: BigNumberish,
    to: AddressLike,
    amountLink: BigNumberish,
    amountNative: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    to: string,
    amountLink: bigint,
    amountNative: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    to: string;
    amountLink: bigint;
    amountNative: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerAddedEvent {
  export type InputTuple = [subId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [subId: bigint, consumer: string];
  export interface OutputObject {
    subId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerRemovedEvent {
  export type InputTuple = [subId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [subId: bigint, consumer: string];
  export interface OutputObject {
    subId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [subId: bigint, owner: string];
  export interface OutputObject {
    subId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedEvent {
  export type InputTuple = [
    subId: BigNumberish,
    oldBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    oldBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    oldBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedWithNativeEvent {
  export type InputTuple = [
    subId: BigNumberish,
    oldNativeBalance: BigNumberish,
    newNativeBalance: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    oldNativeBalance: bigint,
    newNativeBalance: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    oldNativeBalance: bigint;
    newNativeBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferRequestedEvent {
  export type InputTuple = [
    subId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subId: bigint, from: string, to: string];
  export interface OutputObject {
    subId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferredEvent {
  export type InputTuple = [
    subId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subId: bigint, from: string, to: string];
  export interface OutputObject {
    subId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionAPI extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionAPI;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionAPIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LINK: TypedContractMethod<[], [string], "view">;

  LINK_NATIVE_FEED: TypedContractMethod<[], [string], "view">;

  MAX_CONSUMERS: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  fundSubscriptionWithNative: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "payable"
  >;

  getActiveSubscriptionIds: TypedContractMethod<
    [startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, bigint, string, string[]] & {
        balance: bigint;
        nativeBalance: bigint;
        reqCount: bigint;
        subOwner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  onTokenTransfer: TypedContractMethod<
    [arg0: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerCancelSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingRequestExists: TypedContractMethod<
    [subId: BigNumberish],
    [boolean],
    "view"
  >;

  recoverFunds: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  recoverNativeFunds: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  removeConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  s_config: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        minimumRequestConfirmations: bigint;
        maxGasLimit: bigint;
        reentrancyLock: boolean;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
        fulfillmentFlatFeeNativePPM: bigint;
        fulfillmentFlatFeeLinkDiscountPPM: bigint;
        nativePremiumPercentage: bigint;
        linkPremiumPercentage: bigint;
      }
    ],
    "view"
  >;

  s_currentSubNonce: TypedContractMethod<[], [bigint], "view">;

  s_totalBalance: TypedContractMethod<[], [bigint], "view">;

  s_totalNativeBalance: TypedContractMethod<[], [bigint], "view">;

  setLINKAndLINKNativeFeed: TypedContractMethod<
    [link: AddressLike, linkNativeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  withdrawNative: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LINK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LINK_NATIVE_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CONSUMERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "fundSubscriptionWithNative"
  ): TypedContractMethod<[subId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getActiveSubscriptionIds"
  ): TypedContractMethod<
    [startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, bigint, string, string[]] & {
        balance: bigint;
        nativeBalance: bigint;
        reqCount: bigint;
        subOwner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onTokenTransfer"
  ): TypedContractMethod<
    [arg0: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerCancelSubscription"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverFunds"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverNativeFunds"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "s_config"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        minimumRequestConfirmations: bigint;
        maxGasLimit: bigint;
        reentrancyLock: boolean;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
        fulfillmentFlatFeeNativePPM: bigint;
        fulfillmentFlatFeeLinkDiscountPPM: bigint;
        nativePremiumPercentage: bigint;
        linkPremiumPercentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_currentSubNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_totalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_totalNativeBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setLINKAndLINKNativeFeed"
  ): TypedContractMethod<
    [link: AddressLike, linkNativeFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNative"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FundsRecovered"
  ): TypedContractEvent<
    FundsRecoveredEvent.InputTuple,
    FundsRecoveredEvent.OutputTuple,
    FundsRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "NativeFundsRecovered"
  ): TypedContractEvent<
    NativeFundsRecoveredEvent.InputTuple,
    NativeFundsRecoveredEvent.OutputTuple,
    NativeFundsRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCanceled"
  ): TypedContractEvent<
    SubscriptionCanceledEvent.InputTuple,
    SubscriptionCanceledEvent.OutputTuple,
    SubscriptionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerAdded"
  ): TypedContractEvent<
    SubscriptionConsumerAddedEvent.InputTuple,
    SubscriptionConsumerAddedEvent.OutputTuple,
    SubscriptionConsumerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerRemoved"
  ): TypedContractEvent<
    SubscriptionConsumerRemovedEvent.InputTuple,
    SubscriptionConsumerRemovedEvent.OutputTuple,
    SubscriptionConsumerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFunded"
  ): TypedContractEvent<
    SubscriptionFundedEvent.InputTuple,
    SubscriptionFundedEvent.OutputTuple,
    SubscriptionFundedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFundedWithNative"
  ): TypedContractEvent<
    SubscriptionFundedWithNativeEvent.InputTuple,
    SubscriptionFundedWithNativeEvent.OutputTuple,
    SubscriptionFundedWithNativeEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferRequested"
  ): TypedContractEvent<
    SubscriptionOwnerTransferRequestedEvent.InputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferred"
  ): TypedContractEvent<
    SubscriptionOwnerTransferredEvent.InputTuple,
    SubscriptionOwnerTransferredEvent.OutputTuple,
    SubscriptionOwnerTransferredEvent.OutputObject
  >;

  filters: {
    "FundsRecovered(address,uint256)": TypedContractEvent<
      FundsRecoveredEvent.InputTuple,
      FundsRecoveredEvent.OutputTuple,
      FundsRecoveredEvent.OutputObject
    >;
    FundsRecovered: TypedContractEvent<
      FundsRecoveredEvent.InputTuple,
      FundsRecoveredEvent.OutputTuple,
      FundsRecoveredEvent.OutputObject
    >;

    "NativeFundsRecovered(address,uint256)": TypedContractEvent<
      NativeFundsRecoveredEvent.InputTuple,
      NativeFundsRecoveredEvent.OutputTuple,
      NativeFundsRecoveredEvent.OutputObject
    >;
    NativeFundsRecovered: TypedContractEvent<
      NativeFundsRecoveredEvent.InputTuple,
      NativeFundsRecoveredEvent.OutputTuple,
      NativeFundsRecoveredEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SubscriptionCanceled(uint256,address,uint256,uint256)": TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;
    SubscriptionCanceled: TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;

    "SubscriptionConsumerAdded(uint256,address)": TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;
    SubscriptionConsumerAdded: TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;

    "SubscriptionConsumerRemoved(uint256,address)": TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;
    SubscriptionConsumerRemoved: TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;

    "SubscriptionCreated(uint256,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionFunded(uint256,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
    SubscriptionFunded: TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;

    "SubscriptionFundedWithNative(uint256,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedWithNativeEvent.InputTuple,
      SubscriptionFundedWithNativeEvent.OutputTuple,
      SubscriptionFundedWithNativeEvent.OutputObject
    >;
    SubscriptionFundedWithNative: TypedContractEvent<
      SubscriptionFundedWithNativeEvent.InputTuple,
      SubscriptionFundedWithNativeEvent.OutputTuple,
      SubscriptionFundedWithNativeEvent.OutputObject
    >;

    "SubscriptionOwnerTransferRequested(uint256,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;
    SubscriptionOwnerTransferRequested: TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferred(uint256,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
    SubscriptionOwnerTransferred: TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
  };
}
