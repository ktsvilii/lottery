/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Lottery {
  export type LotteryTicketStruct = {
    id: BigNumberish;
    owner: AddressLike;
    purchaseTimestamp: BigNumberish;
    playerCombination: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
    winningCombination: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
    matchingNumbers: BigNumberish;
    potentialReward: BigNumberish;
    actualReward: BigNumberish;
    isRewardClaimed: boolean;
    playerCombinationSubmitted: boolean;
    winningCombinationGenerated: boolean;
    randomNumberRequested: boolean;
  };

  export type LotteryTicketStructOutput = [
    id: bigint,
    owner: string,
    purchaseTimestamp: bigint,
    playerCombination: [bigint, bigint, bigint, bigint, bigint],
    winningCombination: [bigint, bigint, bigint, bigint, bigint],
    matchingNumbers: bigint,
    potentialReward: bigint,
    actualReward: bigint,
    isRewardClaimed: boolean,
    playerCombinationSubmitted: boolean,
    winningCombinationGenerated: boolean,
    randomNumberRequested: boolean
  ] & {
    id: bigint;
    owner: string;
    purchaseTimestamp: bigint;
    playerCombination: [bigint, bigint, bigint, bigint, bigint];
    winningCombination: [bigint, bigint, bigint, bigint, bigint];
    matchingNumbers: bigint;
    potentialReward: bigint;
    actualReward: bigint;
    isRewardClaimed: boolean;
    playerCombinationSubmitted: boolean;
    winningCombinationGenerated: boolean;
    randomNumberRequested: boolean;
  };
}

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CALLBACK_GAS_LIMIT"
      | "NUMBER_OF_WORDS"
      | "NUMBER_RANGE"
      | "REQUEST_CONFIRMATIONS"
      | "TICKET_PRICE_WEI"
      | "acceptOwnership"
      | "allTicketIds"
      | "buyBatchTickets"
      | "buyTicket"
      | "buyTickets"
      | "claimReward"
      | "fundJackpot"
      | "getAllTickets"
      | "getContractOwner"
      | "getJackpot"
      | "getPlayerTickets"
      | "getTicketById"
      | "jackpot"
      | "nextTicketId"
      | "owner"
      | "playerTicketIds"
      | "rawFulfillRandomWords"
      | "requestIdToTicketId"
      | "s_vrfCoordinator"
      | "setCoordinator"
      | "submitCombination"
      | "tickets"
      | "transferOwnership"
      | "withdrawJackpot"
      | "withdrawOperationsBalance"
      | "withdrawOwnerBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CoordinatorSet"
      | "Distribute"
      | "FundJackpot"
      | "JackpotWithdraw"
      | "OperationsBalanceWithdraw"
      | "OwnerBalanceWithdraw"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "PlayerCombinationSubmitted"
      | "RandomNumberGenerated"
      | "RewardClaimed"
      | "TicketPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CALLBACK_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUMBER_OF_WORDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUMBER_RANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUEST_CONFIRMATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TICKET_PRICE_WEI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTicketIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBatchTickets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyTicket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundJackpot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jackpot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTicketId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerTicketIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToTicketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCoordinator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitCombination",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawJackpot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOperationsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOwnerBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CALLBACK_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUMBER_OF_WORDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUMBER_RANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUEST_CONFIRMATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TICKET_PRICE_WEI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTicketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBatchTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerTicketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCombination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawJackpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOperationsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOwnerBalance",
    data: BytesLike
  ): Result;
}

export namespace CoordinatorSetEvent {
  export type InputTuple = [vrfCoordinator: AddressLike];
  export type OutputTuple = [vrfCoordinator: string];
  export interface OutputObject {
    vrfCoordinator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundJackpotEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JackpotWithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationsBalanceWithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerBalanceWithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCombinationSubmittedEvent {
  export type InputTuple = [
    player: AddressLike,
    combination: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ];
  export type OutputTuple = [
    player: string,
    combination: [bigint, bigint, bigint, bigint, bigint]
  ];
  export interface OutputObject {
    player: string;
    combination: [bigint, bigint, bigint, bigint, bigint];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomNumberGeneratedEvent {
  export type InputTuple = [ticketId: BigNumberish];
  export type OutputTuple = [ticketId: bigint];
  export interface OutputObject {
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    player: AddressLike,
    ticketId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [player: string, ticketId: bigint, amount: bigint];
  export interface OutputObject {
    player: string;
    ticketId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [player: AddressLike, ticketNumber: BigNumberish];
  export type OutputTuple = [player: string, ticketNumber: bigint];
  export interface OutputObject {
    player: string;
    ticketNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CALLBACK_GAS_LIMIT: TypedContractMethod<[], [bigint], "view">;

  NUMBER_OF_WORDS: TypedContractMethod<[], [bigint], "view">;

  NUMBER_RANGE: TypedContractMethod<[], [bigint], "view">;

  REQUEST_CONFIRMATIONS: TypedContractMethod<[], [bigint], "view">;

  TICKET_PRICE_WEI: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allTicketIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  buyBatchTickets: TypedContractMethod<
    [],
    [Lottery.LotteryTicketStructOutput[]],
    "payable"
  >;

  buyTicket: TypedContractMethod<
    [],
    [Lottery.LotteryTicketStructOutput[]],
    "payable"
  >;

  buyTickets: TypedContractMethod<
    [count: BigNumberish],
    [Lottery.LotteryTicketStructOutput[]],
    "payable"
  >;

  claimReward: TypedContractMethod<
    [ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundJackpot: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllTickets: TypedContractMethod<
    [],
    [Lottery.LotteryTicketStructOutput[]],
    "view"
  >;

  getContractOwner: TypedContractMethod<[], [string], "view">;

  getJackpot: TypedContractMethod<[], [bigint], "view">;

  getPlayerTickets: TypedContractMethod<
    [],
    [Lottery.LotteryTicketStructOutput[]],
    "view"
  >;

  getTicketById: TypedContractMethod<
    [ticketId: BigNumberish],
    [Lottery.LotteryTicketStructOutput],
    "view"
  >;

  jackpot: TypedContractMethod<[], [bigint], "view">;

  nextTicketId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerTicketIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestIdToTicketId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  s_vrfCoordinator: TypedContractMethod<[], [string], "view">;

  setCoordinator: TypedContractMethod<
    [_vrfCoordinator: AddressLike],
    [void],
    "nonpayable"
  >;

  submitCombination: TypedContractMethod<
    [
      ticketId: BigNumberish,
      playerCombination: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [void],
    "nonpayable"
  >;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        owner: string;
        purchaseTimestamp: bigint;
        matchingNumbers: bigint;
        potentialReward: bigint;
        actualReward: bigint;
        isRewardClaimed: boolean;
        playerCombinationSubmitted: boolean;
        winningCombinationGenerated: boolean;
        randomNumberRequested: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawJackpot: TypedContractMethod<[], [void], "nonpayable">;

  withdrawOperationsBalance: TypedContractMethod<[], [void], "nonpayable">;

  withdrawOwnerBalance: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CALLBACK_GAS_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NUMBER_OF_WORDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NUMBER_RANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REQUEST_CONFIRMATIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TICKET_PRICE_WEI"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allTicketIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyBatchTickets"
  ): TypedContractMethod<[], [Lottery.LotteryTicketStructOutput[]], "payable">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[], [Lottery.LotteryTicketStructOutput[]], "payable">;
  getFunction(
    nameOrSignature: "buyTickets"
  ): TypedContractMethod<
    [count: BigNumberish],
    [Lottery.LotteryTicketStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[ticketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundJackpot"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTickets"
  ): TypedContractMethod<[], [Lottery.LotteryTicketStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getJackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerTickets"
  ): TypedContractMethod<[], [Lottery.LotteryTicketStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTicketById"
  ): TypedContractMethod<
    [ticketId: BigNumberish],
    [Lottery.LotteryTicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jackpot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTicketId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerTicketIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIdToTicketId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCoordinator"
  ): TypedContractMethod<[_vrfCoordinator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitCombination"
  ): TypedContractMethod<
    [
      ticketId: BigNumberish,
      playerCombination: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        owner: string;
        purchaseTimestamp: bigint;
        matchingNumbers: bigint;
        potentialReward: bigint;
        actualReward: bigint;
        isRewardClaimed: boolean;
        playerCombinationSubmitted: boolean;
        winningCombinationGenerated: boolean;
        randomNumberRequested: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawJackpot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOperationsBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOwnerBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CoordinatorSet"
  ): TypedContractEvent<
    CoordinatorSetEvent.InputTuple,
    CoordinatorSetEvent.OutputTuple,
    CoordinatorSetEvent.OutputObject
  >;
  getEvent(
    key: "Distribute"
  ): TypedContractEvent<
    DistributeEvent.InputTuple,
    DistributeEvent.OutputTuple,
    DistributeEvent.OutputObject
  >;
  getEvent(
    key: "FundJackpot"
  ): TypedContractEvent<
    FundJackpotEvent.InputTuple,
    FundJackpotEvent.OutputTuple,
    FundJackpotEvent.OutputObject
  >;
  getEvent(
    key: "JackpotWithdraw"
  ): TypedContractEvent<
    JackpotWithdrawEvent.InputTuple,
    JackpotWithdrawEvent.OutputTuple,
    JackpotWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OperationsBalanceWithdraw"
  ): TypedContractEvent<
    OperationsBalanceWithdrawEvent.InputTuple,
    OperationsBalanceWithdrawEvent.OutputTuple,
    OperationsBalanceWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnerBalanceWithdraw"
  ): TypedContractEvent<
    OwnerBalanceWithdrawEvent.InputTuple,
    OwnerBalanceWithdrawEvent.OutputTuple,
    OwnerBalanceWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCombinationSubmitted"
  ): TypedContractEvent<
    PlayerCombinationSubmittedEvent.InputTuple,
    PlayerCombinationSubmittedEvent.OutputTuple,
    PlayerCombinationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "RandomNumberGenerated"
  ): TypedContractEvent<
    RandomNumberGeneratedEvent.InputTuple,
    RandomNumberGeneratedEvent.OutputTuple,
    RandomNumberGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;

  filters: {
    "CoordinatorSet(address)": TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;
    CoordinatorSet: TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;

    "Distribute(address,uint256)": TypedContractEvent<
      DistributeEvent.InputTuple,
      DistributeEvent.OutputTuple,
      DistributeEvent.OutputObject
    >;
    Distribute: TypedContractEvent<
      DistributeEvent.InputTuple,
      DistributeEvent.OutputTuple,
      DistributeEvent.OutputObject
    >;

    "FundJackpot(address,uint256)": TypedContractEvent<
      FundJackpotEvent.InputTuple,
      FundJackpotEvent.OutputTuple,
      FundJackpotEvent.OutputObject
    >;
    FundJackpot: TypedContractEvent<
      FundJackpotEvent.InputTuple,
      FundJackpotEvent.OutputTuple,
      FundJackpotEvent.OutputObject
    >;

    "JackpotWithdraw(address,uint256)": TypedContractEvent<
      JackpotWithdrawEvent.InputTuple,
      JackpotWithdrawEvent.OutputTuple,
      JackpotWithdrawEvent.OutputObject
    >;
    JackpotWithdraw: TypedContractEvent<
      JackpotWithdrawEvent.InputTuple,
      JackpotWithdrawEvent.OutputTuple,
      JackpotWithdrawEvent.OutputObject
    >;

    "OperationsBalanceWithdraw(address,uint256)": TypedContractEvent<
      OperationsBalanceWithdrawEvent.InputTuple,
      OperationsBalanceWithdrawEvent.OutputTuple,
      OperationsBalanceWithdrawEvent.OutputObject
    >;
    OperationsBalanceWithdraw: TypedContractEvent<
      OperationsBalanceWithdrawEvent.InputTuple,
      OperationsBalanceWithdrawEvent.OutputTuple,
      OperationsBalanceWithdrawEvent.OutputObject
    >;

    "OwnerBalanceWithdraw(address,uint256)": TypedContractEvent<
      OwnerBalanceWithdrawEvent.InputTuple,
      OwnerBalanceWithdrawEvent.OutputTuple,
      OwnerBalanceWithdrawEvent.OutputObject
    >;
    OwnerBalanceWithdraw: TypedContractEvent<
      OwnerBalanceWithdrawEvent.InputTuple,
      OwnerBalanceWithdrawEvent.OutputTuple,
      OwnerBalanceWithdrawEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerCombinationSubmitted(address,uint256[5])": TypedContractEvent<
      PlayerCombinationSubmittedEvent.InputTuple,
      PlayerCombinationSubmittedEvent.OutputTuple,
      PlayerCombinationSubmittedEvent.OutputObject
    >;
    PlayerCombinationSubmitted: TypedContractEvent<
      PlayerCombinationSubmittedEvent.InputTuple,
      PlayerCombinationSubmittedEvent.OutputTuple,
      PlayerCombinationSubmittedEvent.OutputObject
    >;

    "RandomNumberGenerated(uint256)": TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;
    RandomNumberGenerated: TypedContractEvent<
      RandomNumberGeneratedEvent.InputTuple,
      RandomNumberGeneratedEvent.OutputTuple,
      RandomNumberGeneratedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "TicketPurchased(address,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
  };
}
